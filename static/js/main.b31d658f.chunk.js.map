{"version":3,"sources":["graph-config.js","graph.js","App.js","serviceWorker.js","index.js"],"names":["nodeTypes","edgeTypes","EmptyNodeShape","viewBox","width","height","id","cx","cy","r","CustomEmptyShape","SpecialShapeSolid","transform","className","SpecialShapeDotted","SpecialShapeDashed","SpecialShapeDashedDotted","PolyShape","d","ComplexCircleShape","fill","stroke","data-intersect-ignore","SkinnyShape","x","y","rx","ry","SkinnyShapeSolid","SkinnyShapeSolidRed","SkinnyShapeSolidGreen","SkinnyShapeSolidBlue","SkinnyShapeDashed","SkinnyShapeDotted","SkinnyShapeDashedDotted","SpecialChildShape","EdgeTypes","emptyEdge","shape","shapeId","specialEdge","NodeSubtypes","specialChild","NodeTypes","emptyNode","typeText","empty","specialSolid","specialDotted","specialDashed","specialDashedDotted","skinny","skinnySolid","skinnySolidRed","skinnySolidGreen","skinnySolidBlue","skinnyDotted","skinnyDashed","skinnyDashedDotted","poly","complexCircle","nodeTypesNew","special","solid","dashed","dotted","dashedDotted","solidRed","solidGreen","solidBlue","circle","sample","edges","handleText","handleTooltipText","source","target","type","nodes","title","subtype","Graph","props","makeItLarge","graph","state","generatedSample","totalNodes","numNodes","i","push","Math","floor","length","random","generateSample","setState","addStartNode","Date","now","nodeCategoryType","nodeStrokeType","nodeSubType","deleteStartNode","splice","handleChange","event","parseInt","value","onUpdateNode","viewNode","getNodeIndex","onSelectNode","selected","onSelectEdge","viewEdge","onCreateNode","onDeleteNode","nodeId","nodeArr","newEdges","filter","edge","onCreateEdge","sourceViewNode","targetViewNode","onSwapEdge","getEdgeIndex","JSON","parse","stringify","onDeleteEdge","onUndo","console","warn","onCopySelected","copiedNode","onPasteSelected","newNode","forceUpdate","handleChangeLayoutEngineType","layoutEngineType","handleChangeNodeStrokeType","handleChangeNodeType","handleChangeNodeSubType","onSelectPanNode","GraphView","panToNode","undefined","currentColor","React","searchNode","this","findIndex","node","searchEdge","nodeKey","GraphConfig","onClick","name","onChange","disabled","ref","el","nodeSubtypes","App","basename","exact","path","component","Boolean","window","location","hostname","match","ReactDOM","render","document","getElementById","navigator","serviceWorker","ready","then","registration","unregister"],"mappings":"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","file":"static/js/main.b31d658f.chunk.js","sourcesContent":["import * as React from 'react';\n\nexport const NODE_KEY = 'id'; // Key used to identify nodes\nexport const EMPTY_TYPE = 'customEmpty'; // Empty node type\nexport const POLY_TYPE = 'poly';\nexport const SPECIAL_SOLID_TYPE = 'specialSolid';\nexport const SPECIAL_DASHED_TYPE = 'specialDashed';\nexport const SPECIAL_DOTTED_TYPE = 'specialDotted';\nexport const SPECIAL_DASHED_DOTTED_TYPE = 'specialDashedDotted';\nexport const SKINNY_TYPE = 'skinny';\nexport const SKINNY_SOLID_TYPE = 'skinnySolid';\n\nexport const SKINNY_SOLID_RED_TYPE = 'skinnySolidRed';\nexport const SKINNY_SOLID_GREEN_TYPE = 'skinnySolidGreen';\nexport const SKINNY_SOLID_BLUE_TYPE = 'skinnySolidBlue';\n\nexport const SKINNY_DASHED_TYPE = 'skinnyDashed';\nexport const SKINNY_DOTTED_TYPE = 'skinnyDotted';\nexport const SKINNY_DASHED_DOTTED_TYPE = 'skinnyDashedDotted';\nexport const SPECIAL_CHILD_SUBTYPE = 'specialChild';\nexport const EMPTY_EDGE_TYPE = 'emptyEdge';\nexport const SPECIAL_EDGE_TYPE = 'specialEdge';\nexport const COMPLEX_CIRCLE_TYPE = 'complexCircle';\n\nexport const nodeTypes = [\n  EMPTY_TYPE,\n  POLY_TYPE,\n  SPECIAL_SOLID_TYPE,\n  SPECIAL_DASHED_TYPE,\n  SPECIAL_DOTTED_TYPE,\n  SPECIAL_DASHED_DOTTED_TYPE,\n  SKINNY_TYPE,\n  SKINNY_SOLID_TYPE,\n  SKINNY_SOLID_RED_TYPE,\n  SKINNY_SOLID_GREEN_TYPE,\n  SKINNY_SOLID_BLUE_TYPE,\n  SKINNY_DASHED_TYPE,\n  SKINNY_DOTTED_TYPE,\n  SKINNY_DASHED_DOTTED_TYPE,\n];\nexport const edgeTypes = [EMPTY_EDGE_TYPE, SPECIAL_EDGE_TYPE];\n\nconst EmptyNodeShape = (\n  <symbol viewBox=\"0 0 154 154\" width=\"154\" height=\"154\" id=\"emptyNode\">\n    <circle cx=\"77\" cy=\"77\" r=\"76\" />\n  </symbol>\n);\n\nconst CustomEmptyShape = (\n  <symbol viewBox=\"0 0 100 100\" id=\"customEmpty\">\n    <circle cx=\"50\" cy=\"50\" r=\"45\" />\n  </symbol>\n);\n\nconst SpecialShapeSolid = (\n  <symbol viewBox=\"-27 0 154 154\" id=\"specialSolid\" width=\"154\" height=\"154\">\n    <rect\n      transform=\"translate(50) rotate(45)\"\n      className=\"solid\"\n      width=\"109\"\n      height=\"109\"\n    />\n  </symbol>\n);\n\nconst SpecialShapeDotted = (\n  <symbol viewBox=\"-27 0 154 154\" id=\"specialDotted\" width=\"154\" height=\"154\">\n    <rect\n      transform=\"translate(50) rotate(45)\"\n      className=\"dotted\"\n      width=\"109\"\n      height=\"109\"\n    />\n  </symbol>\n);\n\nconst SpecialShapeDashed = (\n  <symbol viewBox=\"-27 0 154 154\" id=\"specialDashed\" width=\"154\" height=\"154\">\n    <rect\n      transform=\"translate(50) rotate(45)\"\n      className=\"dashed\"\n      width=\"109\"\n      height=\"109\"\n    />\n  </symbol>\n);\n\nconst SpecialShapeDashedDotted = (\n  <symbol\n    viewBox=\"-27 0 154 154\"\n    id=\"specialDashedDotted\"\n    width=\"154\"\n    height=\"154\"\n  >\n    <rect\n      transform=\"translate(50) rotate(45)\"\n      className=\"dashedDotted\"\n      width=\"109\"\n      height=\"109\"\n    />\n  </symbol>\n);\n\nconst PolyShape = (\n  <symbol viewBox=\"0 0 88 72\" id=\"poly\" width=\"88\" height=\"88\">\n    <path d=\"M 0 36 18 0 70 0 88 36 70 72 18 72Z\" />\n  </symbol>\n);\n\nconst ComplexCircleShape = (\n  <symbol viewBox=\"0 0 100 100\" id=\"complexCircle\" width=\"100\" height=\"100\">\n    <circle cx=\"50\" cy=\"50\" r=\"50\" fill=\"transparent\" stroke=\"transparent\" />\n    <circle cx=\"50\" cy=\"50\" r=\"34\" />\n    <path\n      d=\"M50,0a50,50,0,1,0,50,50A50,50,0,0,0,50,0Zm0,90A40,40,0,1,1,90,50,40,40,0,0,1,50,90Z\"\n      data-intersect-ignore=\"true\"\n    />\n  </symbol>\n);\n\nconst SkinnyShape = (\n  <symbol viewBox=\"0 0 250 108\" width=\"250\" height=\"108\" id=\"skinny\">\n    <rect x=\"0\" y=\"0\" rx=\"2\" ry=\"2\" width=\"250\" height=\"108\" />\n  </symbol>\n);\n\nconst SkinnyShapeSolid = (\n  <symbol viewBox=\"0 0 250 108\" width=\"250\" height=\"108\" id=\"skinnySolid\">\n    <rect\n      x=\"0\"\n      y=\"0\"\n      rx=\"2\"\n      ry=\"2\"\n      width=\"250\"\n      height=\"108\"\n      className=\"solid\"\n    />\n  </symbol>\n);\n\nconst SkinnyShapeSolidRed = (\n  <symbol viewBox=\"0 0 250 108\" width=\"250\" height=\"108\" id=\"skinnySolidRed\">\n    <rect\n      x=\"0\"\n      y=\"0\"\n      rx=\"2\"\n      ry=\"2\"\n      width=\"250\"\n      height=\"108\"\n      className=\"solid red\"\n    />\n  </symbol>\n);\n\nconst SkinnyShapeSolidGreen = (\n  <symbol viewBox=\"0 0 250 108\" width=\"250\" height=\"108\" id=\"skinnySolidGreen\">\n    <rect\n      x=\"0\"\n      y=\"0\"\n      rx=\"2\"\n      ry=\"2\"\n      width=\"250\"\n      height=\"108\"\n      className=\"solid green\"\n    />\n  </symbol>\n);\n\nconst SkinnyShapeSolidBlue = (\n  <symbol viewBox=\"0 0 250 108\" width=\"250\" height=\"108\" id=\"skinnySolidBlue\">\n    <rect\n      x=\"0\"\n      y=\"0\"\n      rx=\"2\"\n      ry=\"2\"\n      width=\"250\"\n      height=\"108\"\n      className=\"solid blue\"\n    />\n  </symbol>\n);\n\nconst SkinnyShapeDashed = (\n  <symbol viewBox=\"0 0 250 108\" width=\"250\" height=\"108\" id=\"skinnyDashed\">\n    <rect\n      x=\"0\"\n      y=\"0\"\n      rx=\"2\"\n      ry=\"2\"\n      width=\"250\"\n      height=\"108\"\n      className=\"dashed\"\n    />\n  </symbol>\n);\n\nconst SkinnyShapeDotted = (\n  <symbol viewBox=\"0 0 250 108\" width=\"250\" height=\"108\" id=\"skinnyDotted\">\n    <rect\n      x=\"0\"\n      y=\"0\"\n      rx=\"2\"\n      ry=\"2\"\n      width=\"250\"\n      height=\"108\"\n      className=\"dotted\"\n    />\n  </symbol>\n);\n\nconst SkinnyShapeDashedDotted = (\n  <symbol\n    viewBox=\"0 0 250 108\"\n    width=\"250\"\n    height=\"108\"\n    id=\"skinnyDashedDotted\"\n  >\n    <rect\n      x=\"0\"\n      y=\"0\"\n      rx=\"2\"\n      ry=\"2\"\n      width=\"250\"\n      height=\"108\"\n      className=\"dashedDotted\"\n    />\n  </symbol>\n);\n\nconst SpecialChildShape = (\n  <symbol viewBox=\"0 0 154 154\" id=\"specialChild\">\n    <rect\n      x=\"2.5\"\n      y=\"0\"\n      width=\"154\"\n      height=\"154\"\n      fill=\"rgba(30, 144, 255, 0.12)\"\n    />\n  </symbol>\n);\n\nconst EmptyEdgeShape = (\n  <symbol viewBox=\"0 0 50 50\" id=\"emptyEdge\">\n    <circle cx=\"25\" cy=\"25\" r=\"8\" fill=\"currentColor\" />\n  </symbol>\n);\n\nconst SpecialEdgeShape = (\n  <symbol viewBox=\"0 0 50 50\" id=\"specialEdge\">\n    <rect\n      transform=\"rotate(45)\"\n      x=\"27.5\"\n      y=\"-7.5\"\n      width=\"15\"\n      height=\"15\"\n      fill=\"currentColor\"\n    />\n  </symbol>\n);\n\nexport default {\n  EdgeTypes: {\n    emptyEdge: {\n      shape: EmptyEdgeShape,\n      shapeId: '#emptyEdge',\n    },\n    specialEdge: {\n      shape: SpecialEdgeShape,\n      shapeId: '#specialEdge',\n    },\n  },\n  NodeSubtypes: {\n    specialChild: {\n      shape: SpecialChildShape,\n      shapeId: '#specialChild',\n    },\n  },\n  NodeTypes: {\n    emptyNode: {\n      shape: EmptyNodeShape,\n      shapeId: '#emptyNode',\n      typeText: 'None',\n    },\n    empty: {\n      shape: CustomEmptyShape,\n      shapeId: '#empty',\n      typeText: 'None',\n    },\n\n    specialSolid: {\n      shape: SpecialShapeSolid,\n      shapeId: '#specialSolid',\n      typeText: 'Special solid',\n    },\n    specialDotted: {\n      shape: SpecialShapeDotted,\n      shapeId: '#specialDotted',\n      typeText: 'Special dotted',\n    },\n    specialDashed: {\n      shape: SpecialShapeDashed,\n      shapeId: '#specialDashed',\n      typeText: 'Special dashed',\n    },\n    specialDashedDotted: {\n      shape: SpecialShapeDashedDotted,\n      shapeId: '#specialDashedDotted',\n      typeText: 'Special dashed dotted',\n    },\n\n    skinny: {\n      shape: SkinnyShape,\n      shapeId: '#skinny',\n      typeText: 'Skinny',\n    },\n    skinnySolid: {\n      shape: SkinnyShapeSolid,\n      shapeId: '#skinnySolid',\n      typeText: 'Skinny solid',\n    },\n    skinnySolidRed: {\n      shape: SkinnyShapeSolidRed,\n      shapeId: '#skinnySolidRed',\n      typeText: 'Skinny solid red',\n    },\n    skinnySolidGreen: {\n      shape: SkinnyShapeSolidGreen,\n      shapeId: '#skinnySolidGreen',\n      typeText: 'Skinny solid green',\n    },\n    skinnySolidBlue: {\n      shape: SkinnyShapeSolidBlue,\n      shapeId: '#skinnySolidBlue',\n      typeText: 'Skinny solid blue',\n    },\n    skinnyDotted: {\n      shape: SkinnyShapeDotted,\n      shapeId: '#skinnyDotted',\n      typeText: 'Skinny dotted',\n    },\n    skinnyDashed: {\n      shape: SkinnyShapeDashed,\n      shapeId: '#skinnyDashed',\n      typeText: 'Skinny dashed',\n    },\n    skinnyDashedDotted: {\n      shape: SkinnyShapeDashedDotted,\n      shapeId: '#skinnyDashedDotted',\n      typeText: 'Skinny dashed dotted',\n    },\n\n    poly: {\n      shape: PolyShape,\n      shapeId: '#poly',\n      typeText: 'Poly',\n    },\n    complexCircle: {\n      shape: ComplexCircleShape,\n      shapeId: '#complexCircle',\n      typeText: '#complexCircle',\n    },\n  },\n};\n","// @flow\n\nimport * as React from 'react';\n\nimport {\n  GraphView, // required\n  type IEdge, // optional\n  type INode, // optional\n  type LayoutEngineType, // required to change the layoutEngineType, otherwise optional\n} from 'react-digraph';\n\nimport GraphConfig, {\n  edgeTypes,\n  EMPTY_EDGE_TYPE,\n  EMPTY_TYPE,\n  NODE_KEY,\n  nodeTypes,\n  COMPLEX_CIRCLE_TYPE,\n  POLY_TYPE,\n  SPECIAL_CHILD_SUBTYPE,\n  SPECIAL_EDGE_TYPE,\n  SPECIAL_SOLID_TYPE,\n  SPECIAL_DASHED_TYPE,\n  SPECIAL_DOTTED_TYPE,\n  SPECIAL_DASHED_DOTTED_TYPE,\n  SKINNY_TYPE,\n  SKINNY_SOLID_TYPE,\n  SKINNY_SOLID_RED_TYPE,\n  SKINNY_SOLID_GREEN_TYPE,\n  SKINNY_SOLID_BLUE_TYPE,\n  SKINNY_DASHED_TYPE,\n  SKINNY_DOTTED_TYPE,\n  SKINNY_DASHED_DOTTED_TYPE,\n} from './graph-config'; // Configures node/edge types\n\nconst nodeTypesNew = {\n  special: {\n    solid: SPECIAL_SOLID_TYPE,\n    dashed: SPECIAL_DASHED_TYPE,\n    dotted: SPECIAL_DOTTED_TYPE,\n    dashedDotted: SPECIAL_DASHED_DOTTED_TYPE,\n  },\n  skinny: {\n    solid: SKINNY_SOLID_TYPE,\n    solidRed: SKINNY_SOLID_RED_TYPE,\n    solidGreen: SKINNY_SOLID_GREEN_TYPE,\n    solidBlue: SKINNY_SOLID_BLUE_TYPE,\n    dashed: SKINNY_DASHED_TYPE,\n    dotted: SKINNY_DOTTED_TYPE,\n    dashedDotted: SKINNY_DASHED_DOTTED_TYPE,\n  },\n  complexCircle: {\n    solid: COMPLEX_CIRCLE_TYPE,\n  },\n  circle: {\n    solid: EMPTY_TYPE,\n  },\n  poly: {\n    solid: POLY_TYPE,\n  },\n};\n\ntype IGraph = {\n  nodes: INode[],\n  edges: IEdge[],\n};\n\n// NOTE: Edges must have 'source' & 'target' attributes\n// In a more realistic use case, the graph would probably originate\n// elsewhere in the App or be generated from some other state upstream of this component.\nconst sample: IGraph = {\n  edges: [\n    {\n      handleText: '5',\n      handleTooltipText: '5',\n      source: 'start1',\n      target: 'a1',\n      type: SPECIAL_EDGE_TYPE,\n    },\n    {\n      handleText: '5',\n      handleTooltipText: 'This edge connects Node A and Node B',\n      source: 'a1',\n      target: 'a2',\n      type: SPECIAL_EDGE_TYPE,\n    },\n    {\n      handleText: '54',\n      source: 'a2',\n      target: 'a4',\n      type: EMPTY_EDGE_TYPE,\n    },\n    {\n      handleText: '54',\n      source: 'a1',\n      target: 'a3',\n      type: EMPTY_EDGE_TYPE,\n    },\n    {\n      handleText: '54',\n      source: 'a3',\n      target: 'a4',\n      type: EMPTY_EDGE_TYPE,\n    },\n    {\n      handleText: '54',\n      source: 'a1',\n      target: 'a5',\n      type: EMPTY_EDGE_TYPE,\n    },\n    {\n      handleText: '54',\n      source: 'a4',\n      target: 'a1',\n      type: EMPTY_EDGE_TYPE,\n    },\n    {\n      handleText: '54',\n      source: 'a1',\n      target: 'a6',\n      type: EMPTY_EDGE_TYPE,\n    },\n    {\n      handleText: '24',\n      source: 'a1',\n      target: 'a7',\n      type: EMPTY_EDGE_TYPE,\n    },\n  ],\n  nodes: [\n    {\n      id: 'start1',\n      title: 'Start (0)',\n      type: SPECIAL_SOLID_TYPE,\n    },\n    {\n      id: 'a1',\n      title: 'Node A (1)',\n      type: SPECIAL_SOLID_TYPE,\n      x: 258.3976135253906,\n      y: 331.9783248901367,\n    },\n    {\n      id: 'a2',\n      subtype: SPECIAL_CHILD_SUBTYPE,\n      title: 'Node B (2)',\n      type: EMPTY_TYPE,\n      x: 593.9393920898438,\n      y: 260.6060791015625,\n    },\n    {\n      id: 'a3',\n      title: 'Node C (3)',\n      type: EMPTY_TYPE,\n      x: 237.5757598876953,\n      y: 61.81818389892578,\n    },\n    {\n      id: 'a4',\n      title: 'Node D (4)',\n      type: EMPTY_TYPE,\n      x: 600.5757598876953,\n      y: 600.81818389892578,\n    },\n    {\n      id: 'a5',\n      title: 'Node E (5)',\n      type: null,\n      x: 50.5757598876953,\n      y: 500.81818389892578,\n    },\n    {\n      id: 'a6',\n      title: 'Node E (6)',\n      type: SKINNY_TYPE,\n      x: 300,\n      y: 600,\n    },\n    {\n      id: 'a7',\n      title: 'Node F (7)',\n      type: POLY_TYPE,\n      x: 0,\n      y: 300,\n    },\n    {\n      id: 'a8',\n      title: 'Node G (8)',\n      type: COMPLEX_CIRCLE_TYPE,\n      x: -200,\n      y: 400,\n    },\n  ],\n};\n\nfunction generateSample(totalNodes) {\n  const generatedSample: IGraph = {\n    edges: [],\n    nodes: [],\n  };\n  let y = 0;\n  let x = 0;\n\n  const numNodes = totalNodes ? totalNodes : 0;\n\n  // generate large array of nodes\n  // These loops are fast enough. 1000 nodes = .45ms + .34ms\n  // 2000 nodes = .86ms + .68ms\n  // implying a linear relationship with number of nodes.\n  for (let i = 1; i <= numNodes; i++) {\n    if (i % 20 === 0) {\n      y++;\n      x = 0;\n    } else {\n      x++;\n    }\n\n    generatedSample.nodes.push({\n      id: `a${i}`,\n      title: `Node ${i}`,\n      type: nodeTypes[Math.floor(nodeTypes.length * Math.random())],\n      x: 0 + 200 * x,\n      y: 0 + 200 * y,\n    });\n  }\n  // link each node to another node\n  for (let i = 1; i < numNodes; i++) {\n    generatedSample.edges.push({\n      source: `a${i}`,\n      target: `a${i + 1}`,\n      type: edgeTypes[Math.floor(edgeTypes.length * Math.random())],\n    });\n  }\n\n  return generatedSample;\n}\n\ntype IGraphProps = {};\n\ntype IGraphState = {\n  graph: any,\n  selected: any,\n  totalNodes: number,\n  copiedNode: any,\n  layoutEngineType?: LayoutEngineType,\n};\n\nclass Graph extends React.Component<IGraphProps, IGraphState> {\n  GraphView;\n\n  constructor(props: IGraphProps) {\n    super(props);\n\n    this.state = {\n      copiedNode: null,\n      graph: sample,\n      layoutEngineType: undefined,\n      selected: null,\n      totalNodes: sample.nodes.length,\n      nodeCategoryType: 'skinny',\n      nodeStrokeType: 'solid',\n      currentColor: 'red',\n      nodeSubType: null,\n    };\n\n    this.GraphView = React.createRef();\n  }\n\n  // Helper to find the index of a given node\n  getNodeIndex(searchNode: INode | any) {\n    return this.state.graph.nodes.findIndex(node => {\n      return node[NODE_KEY] === searchNode[NODE_KEY];\n    });\n  }\n\n  // Helper to find the index of a given edge\n  getEdgeIndex(searchEdge: IEdge) {\n    return this.state.graph.edges.findIndex(edge => {\n      return (\n        edge.source === searchEdge.source && edge.target === searchEdge.target\n      );\n    });\n  }\n\n  // Given a nodeKey, return the corresponding node\n  getViewNode(nodeKey: string) {\n    const searchNode = {};\n\n    searchNode[NODE_KEY] = nodeKey;\n    const i = this.getNodeIndex(searchNode);\n\n    return this.state.graph.nodes[i];\n  }\n\n  makeItLarge = () => {\n    const graph = this.state.graph;\n    const generatedSample = generateSample(this.state.totalNodes);\n\n    graph.nodes = generatedSample.nodes;\n    graph.edges = generatedSample.edges;\n    this.setState(this.state);\n  };\n\n  addStartNode = () => {\n    const graph = this.state.graph;\n\n    // using a new array like this creates a new memory reference\n    // this will force a re-render\n    graph.nodes = [\n      {\n        id: Date.now(),\n        title: 'Node A',\n        type:\n          nodeTypesNew[this.state.nodeCategoryType][this.state.nodeStrokeType],\n        subtype: this.state.nodeSubType,\n        x: 0,\n        y: 0,\n      },\n      ...this.state.graph.nodes,\n    ];\n    this.setState({\n      graph,\n    });\n  };\n  deleteStartNode = () => {\n    const graph = this.state.graph;\n\n    graph.nodes.splice(0, 1);\n    // using a new array like this creates a new memory reference\n    // this will force a re-render\n    graph.nodes = [...this.state.graph.nodes];\n    this.setState({\n      graph,\n    });\n  };\n\n  handleChange = (event: any) => {\n    this.setState(\n      {\n        totalNodes: parseInt(event.target.value || '0', 10),\n      },\n      this.makeItLarge\n    );\n  };\n\n  /*\n   * Handlers/Interaction\n   */\n\n  // Called by 'drag' handler, etc..\n  // to sync updates from D3 with the graph\n  onUpdateNode = (viewNode: INode) => {\n    const graph = this.state.graph;\n    const i = this.getNodeIndex(viewNode);\n\n    graph.nodes[i] = viewNode;\n    this.setState({ graph });\n  };\n\n  // Node 'mouseUp' handler\n  onSelectNode = (viewNode: INode | null) => {\n    // Deselect events will send Null viewNode\n    this.setState({ selected: viewNode });\n  };\n\n  // Edge 'mouseUp' handler\n  onSelectEdge = (viewEdge: IEdge) => {\n    this.setState({ selected: viewEdge });\n  };\n\n  // Updates the graph with a new node\n  onCreateNode = (x: number, y: number) => {\n    const graph = this.state.graph;\n\n    // This is just an example - any sort of logic\n    // could be used here to determine node type\n    // There is also support for subtypes. (see 'sample' above)\n    // The subtype geometry will underlay the 'type' geometry for a node\n    const type =\n      nodeTypesNew[this.state.nodeCategoryType][this.state.nodeStrokeType]; //Math.random() < 0.25 ? SPECIAL_SOLID_TYPE : EMPTY_TYPE;\n\n    const viewNode = {\n      id: Date.now(),\n      title: '',\n      type,\n      x,\n      y,\n    };\n\n    graph.nodes = [...graph.nodes, viewNode];\n    this.setState({ graph });\n  };\n\n  // Deletes a node from the graph\n  onDeleteNode = (viewNode: INode, nodeId: string, nodeArr: INode[]) => {\n    const graph = this.state.graph;\n    // Delete any connected edges\n    const newEdges = graph.edges.filter((edge, i) => {\n      return (\n        edge.source !== viewNode[NODE_KEY] && edge.target !== viewNode[NODE_KEY]\n      );\n    });\n\n    graph.nodes = nodeArr;\n    graph.edges = newEdges;\n\n    this.setState({ graph, selected: null });\n  };\n\n  // Creates a new node between two edges\n  onCreateEdge = (sourceViewNode: INode, targetViewNode: INode) => {\n    const graph = this.state.graph;\n    // This is just an example - any sort of logic\n    // could be used here to determine edge type\n    const type =\n      sourceViewNode.type === SPECIAL_SOLID_TYPE\n        ? SPECIAL_EDGE_TYPE\n        : EMPTY_EDGE_TYPE;\n\n    const viewEdge = {\n      source: sourceViewNode[NODE_KEY],\n      target: targetViewNode[NODE_KEY],\n      type,\n    };\n\n    // Only add the edge when the source node is not the same as the target\n    if (viewEdge.source !== viewEdge.target) {\n      graph.edges = [...graph.edges, viewEdge];\n      this.setState({\n        graph,\n        selected: viewEdge,\n      });\n    }\n  };\n\n  // Called when an edge is reattached to a different target.\n  onSwapEdge = (\n    sourceViewNode: INode,\n    targetViewNode: INode,\n    viewEdge: IEdge\n  ) => {\n    const graph = this.state.graph;\n    const i = this.getEdgeIndex(viewEdge);\n    const edge = JSON.parse(JSON.stringify(graph.edges[i]));\n\n    edge.source = sourceViewNode[NODE_KEY];\n    edge.target = targetViewNode[NODE_KEY];\n    graph.edges[i] = edge;\n    // reassign the array reference if you want the graph to re-render a swapped edge\n    graph.edges = [...graph.edges];\n\n    this.setState({\n      graph,\n      selected: edge,\n    });\n  };\n\n  // Called when an edge is deleted\n  onDeleteEdge = (viewEdge: IEdge, edges: IEdge[]) => {\n    const graph = this.state.graph;\n\n    graph.edges = edges;\n    this.setState({\n      graph,\n      selected: null,\n    });\n  };\n\n  onUndo = () => {\n    // Not implemented\n    console.warn('Undo is not currently implemented in the example.');\n    // Normally any add, remove, or update would record the action in an array.\n    // In order to undo it one would simply call the inverse of the action performed. For instance, if someone\n    // called onDeleteEdge with (viewEdge, i, edges) then an undelete would be a splicing the original viewEdge\n    // into the edges array at position i.\n  };\n\n  onCopySelected = () => {\n    if (this.state.selected.source) {\n      console.warn('Cannot copy selected edges, try selecting a node instead.');\n\n      return;\n    }\n\n    const x = this.state.selected.x + 10;\n    const y = this.state.selected.y + 10;\n\n    this.setState({\n      copiedNode: { ...this.state.selected, x, y },\n    });\n  };\n\n  onPasteSelected = () => {\n    if (!this.state.copiedNode) {\n      console.warn(\n        'No node is currently in the copy queue. Try selecting a node and copying it with Ctrl/Command-C'\n      );\n    }\n\n    const graph = this.state.graph;\n    const newNode = { ...this.state.copiedNode, id: Date.now() };\n\n    graph.nodes = [...graph.nodes, newNode];\n    this.forceUpdate();\n  };\n\n  handleChangeLayoutEngineType = (event: any) => {\n    this.setState({\n      layoutEngineType: (event.target.value: LayoutEngineType | 'None'),\n    });\n  };\n\n  handleChangeNodeStrokeType = (event: any) => {\n    this.setState({\n      nodeStrokeType: event.target.value,\n    });\n  };\n\n  handleChangeNodeType = (event: any) => {\n    this.setState({\n      nodeCategoryType: event.target.value,\n    });\n  };\n\n  handleChangeNodeSubType = (event: any) => {\n    this.setState({\n      nodeSubType: event.target.value,\n    });\n  };\n\n  onSelectPanNode = (event: any) => {\n    if (this.GraphView) {\n      this.GraphView.panToNode(event.target.value, true);\n    }\n  };\n\n  /*\n   * Render\n   */\n\n  render() {\n    const { nodes, edges } = this.state.graph;\n    const selected = this.state.selected;\n    const { NodeTypes, NodeSubtypes, EdgeTypes } = GraphConfig;\n\n    return (\n      <div id=\"graph\">\n        <div className=\"graph-header\">\n          <button onClick={this.addStartNode}>Add Node</button>\n          <div className=\"node-type-selector\">\n            <span>Node type:</span>\n            <select\n              name=\"node-type-selector\"\n              onChange={this.handleChangeNodeType}\n            >\n              <option value={'skinny'}>Standard</option>\n              <option value={'special'}>Conditional</option>\n              <option value={'circle'}>Circle</option>\n              <option value={'complexCircle'}>Complex Circle</option>\n              <option value={'poly'}>Poly</option>\n            </select>\n          </div>\n          <div className=\"node-stroke-selector\">\n            <span>Node border type:</span>\n            <select\n              name=\"node-stroke-selector\"\n              onChange={this.handleChangeNodeStrokeType}\n              disabled={(this.state.nodeCategoryType !== 'skinny' && this.state.nodeCategoryType !== 'special') ? true : false}\n            >\n              <option value={'solid'}>Solid</option>\n              <option value={'dotted'}>Dotted</option>\n              <option value={'dashed'}>Dashed</option>\n              <option value={'dashedDotted'}>Dashed Dotted</option>\n              {this.state.nodeCategoryType === 'skinny' ? (\n                <option value={'solidRed'}>Solid Red</option>\n              ) : null}\n              {this.state.nodeCategoryType === 'skinny' ? (\n                <option value={'solidGreen'}>Solid Green </option>\n              ) : null}\n              {this.state.nodeCategoryType === 'skinny' ? (\n                <option value={'solidBlue'}>Solid Blue</option>\n              ) : null}\n            </select>\n          </div>\n          <div className=\"node-subtype-selector\">\n            <span>Node subtype:</span>\n            <select\n              name=\"node-subtype-selector\"\n              onChange={this.handleChangeNodeSubType}\n              disabled={this.state.nodeCategoryType === 'skinny' ? true : false}\n            >\n              <option value={null}>None</option>\n              <option value={SPECIAL_CHILD_SUBTYPE}>Rectangle</option>\n            </select>\n          </div>\n          <div className=\"layout-engine\">\n            <span>Layout Engine:</span>\n            <select\n              name=\"layout-engine-type\"\n              onChange={this.handleChangeLayoutEngineType}\n            >\n              <option value={undefined}>None</option>\n              <option value={'SnapToGrid'}>Snap to Grid</option>\n              <option value={'VerticalTree'}>Vertical Tree</option>\n              <option value={'HorizontalTree'}>Horizontal Tree</option>\n            </select>\n          </div>\n        </div>\n        <GraphView\n          ref={el => (this.GraphView = el)}\n          nodeKey={NODE_KEY}\n          nodes={nodes}\n          edges={edges}\n          selected={selected}\n          nodeTypes={NodeTypes}\n          nodeSubtypes={NodeSubtypes}\n          edgeTypes={EdgeTypes}\n          onSelectNode={this.onSelectNode}\n          onCreateNode={this.onCreateNode}\n          onUpdateNode={this.onUpdateNode}\n          onDeleteNode={this.onDeleteNode}\n          onSelectEdge={this.onSelectEdge}\n          onCreateEdge={this.onCreateEdge}\n          onSwapEdge={this.onSwapEdge}\n          onDeleteEdge={this.onDeleteEdge}\n          onUndo={this.onUndo}\n          onCopySelected={this.onCopySelected}\n          onPasteSelected={this.onPasteSelected}\n          layoutEngineType={this.state.layoutEngineType}\n        />\n      </div>\n    );\n  }\n}\n\nexport default Graph;\n","import * as React from 'react';\nimport { HashRouter, Route, Link } from 'react-router-dom';\n\nimport Graph from './graph';\n\nimport './app.scss';\n\nclass App extends React.Component {\n  render() {\n    return (\n      <HashRouter basename='/'>\n        <div id='content'>\n          <ul>\n            <li>To add nodes, hold shift and click on the grid or press on button \"Add Node\".</li>\n            <li>To add edges, hold shift and click/drag to between nodes.</li>\n            <li>To delete a node or edge, click on it and press delete.</li>\n            <li>Click and drag nodes to change their position.</li>\n          </ul>\n          <Route exact path=\"/\" component={Graph} />\n        </div>\n      </HashRouter>\n    );\n  }\n}\n\nexport default App;\n","// This optional code is used to register a service worker.\n// register() is not called by default.\n\n// This lets the app load faster on subsequent visits in production, and gives\n// it offline capabilities. However, it also means that developers (and users)\n// will only see deployed updates on subsequent visits to a page, after all the\n// existing tabs open on the page have been closed, since previously cached\n// resources are updated in the background.\n\n// To learn more about the benefits of this model and instructions on how to\n// opt-in, read https://bit.ly/CRA-PWA\n\nconst isLocalhost = Boolean(\n  window.location.hostname === 'localhost' ||\n    // [::1] is the IPv6 localhost address.\n    window.location.hostname === '[::1]' ||\n    // 127.0.0.0/8 are considered localhost for IPv4.\n    window.location.hostname.match(\n      /^127(?:\\.(?:25[0-5]|2[0-4][0-9]|[01]?[0-9][0-9]?)){3}$/\n    )\n);\n\nexport function register(config) {\n  if (process.env.NODE_ENV === 'production' && 'serviceWorker' in navigator) {\n    // The URL constructor is available in all browsers that support SW.\n    const publicUrl = new URL(process.env.PUBLIC_URL, window.location.href);\n    if (publicUrl.origin !== window.location.origin) {\n      // Our service worker won't work if PUBLIC_URL is on a different origin\n      // from what our page is served on. This might happen if a CDN is used to\n      // serve assets; see https://github.com/facebook/create-react-app/issues/2374\n      return;\n    }\n\n    window.addEventListener('load', () => {\n      const swUrl = `${process.env.PUBLIC_URL}/service-worker.js`;\n\n      if (isLocalhost) {\n        // This is running on localhost. Let's check if a service worker still exists or not.\n        checkValidServiceWorker(swUrl, config);\n\n        // Add some additional logging to localhost, pointing developers to the\n        // service worker/PWA documentation.\n        navigator.serviceWorker.ready.then(() => {\n          console.log(\n            'This web app is being served cache-first by a service ' +\n              'worker. To learn more, visit https://bit.ly/CRA-PWA'\n          );\n        });\n      } else {\n        // Is not localhost. Just register service worker\n        registerValidSW(swUrl, config);\n      }\n    });\n  }\n}\n\nfunction registerValidSW(swUrl, config) {\n  navigator.serviceWorker\n    .register(swUrl)\n    .then(registration => {\n      registration.onupdatefound = () => {\n        const installingWorker = registration.installing;\n        if (installingWorker == null) {\n          return;\n        }\n        installingWorker.onstatechange = () => {\n          if (installingWorker.state === 'installed') {\n            if (navigator.serviceWorker.controller) {\n              // At this point, the updated precached content has been fetched,\n              // but the previous service worker will still serve the older\n              // content until all client tabs are closed.\n              console.log(\n                'New content is available and will be used when all ' +\n                  'tabs for this page are closed. See https://bit.ly/CRA-PWA.'\n              );\n\n              // Execute callback\n              if (config && config.onUpdate) {\n                config.onUpdate(registration);\n              }\n            } else {\n              // At this point, everything has been precached.\n              // It's the perfect time to display a\n              // \"Content is cached for offline use.\" message.\n              console.log('Content is cached for offline use.');\n\n              // Execute callback\n              if (config && config.onSuccess) {\n                config.onSuccess(registration);\n              }\n            }\n          }\n        };\n      };\n    })\n    .catch(error => {\n      console.error('Error during service worker registration:', error);\n    });\n}\n\nfunction checkValidServiceWorker(swUrl, config) {\n  // Check if the service worker can be found. If it can't reload the page.\n  fetch(swUrl, {\n    headers: { 'Service-Worker': 'script' }\n  })\n    .then(response => {\n      // Ensure service worker exists, and that we really are getting a JS file.\n      const contentType = response.headers.get('content-type');\n      if (\n        response.status === 404 ||\n        (contentType != null && contentType.indexOf('javascript') === -1)\n      ) {\n        // No service worker found. Probably a different app. Reload the page.\n        navigator.serviceWorker.ready.then(registration => {\n          registration.unregister().then(() => {\n            window.location.reload();\n          });\n        });\n      } else {\n        // Service worker found. Proceed as normal.\n        registerValidSW(swUrl, config);\n      }\n    })\n    .catch(() => {\n      console.log(\n        'No internet connection found. App is running in offline mode.'\n      );\n    });\n}\n\nexport function unregister() {\n  if ('serviceWorker' in navigator) {\n    navigator.serviceWorker.ready.then(registration => {\n      registration.unregister();\n    });\n  }\n}\n","import React from 'react';\nimport ReactDOM from 'react-dom';\nimport './index.css';\nimport App from './App';\nimport * as serviceWorker from './serviceWorker';\n\nReactDOM.render(<App />, document.getElementById('root'));\n\n// If you want your app to work offline and load faster, you can change\n// unregister() to register() below. Note this comes with some pitfalls.\n// Learn more about service workers: https://bit.ly/CRA-PWA\nserviceWorker.unregister();\n"],"sourceRoot":""}